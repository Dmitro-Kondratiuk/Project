<?php

namespace app\modules\admin\models;

use app\models\BlogComent;
use app\models\BlogTag;
use app\models\CategoryBlog;
use app\models\Tag;
use app\models\TagBlog;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\web\UploadedFile;

/**
 * This is the model class for table "blog".
 *
 * @property int $id
 * @property string $name
 * @property string $img
 * @property string $content
 * @property string $created_at
 * @property string $keywords
 * @property string $description
 * @property string $small_content
 */
class Blog extends \yii\db\ActiveRecord
{
    public $file;
    public $tag_array;

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at'],
                ],
                // если вместо метки времени UNIX используется datetime:
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    public function getBlogComent()
    {
        return $this->hasMany(BlogComent::class, ['id' => 'blog_id']);
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'blog';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'content', 'small_content'], 'required'],
            [['content', 'keywords', 'description', 'small_content', 'username'], 'string'],
            [['created_at','tag_array'], 'safe'],
            [['category_id'], 'integer'],
            [['name', 'image'], 'string', 'max' => 255],
            [['file'], 'image']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Имя блога',
            'content' => 'Контент',
            'date' => 'Время создания',
            'keywords' => 'Ключевые слова',
            'description' => 'Мета-описание',
            'small_content' => 'Небольшой текст (который на preview)',
            'image' => 'Картинка',
            'img' => "Картинка",
            'category_id' => 'Id Категории',
             'nameStr'=>'Имя категории'
        ];
    }

    public function beforeSave($insert)
    {
        if ($file = UploadedFile::getInstance($this, 'file')) {
            $dir = 'upload/blog/';
            $this->image = $file->baseName . '_' . Yii::$app->getSecurity()->generateRandomString(7) . '.' . $file->extension;
            $file->saveAs($dir . $this->image);
            return $file;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function getImageLik()
    {
        return Html::img("/upload/blog/" . $this->image);
    }

    public function getImg()
    {
        if ($this->image) {
            $path = str_replace('admin.', '', Url::home(true)) . 'upload/blog/' . $this->image;
        } else {
            $path = str_replace('admin.', '', Url::home(true)) . 'upload/blog/no-image.png';
        }

        return $path;
    }
    public function getBlogTag(){
        return $this->hasOne(BlogTag::class,['blog_id'=>'id']);
    }
    public function getTags(){
        return $this->hasMany(TagBlog::class,['id'=>'tag_id'])->via('blogTag');
    }
    public function afterFind()
    {
        $this->tag_array = $this->tags;
    }
    public function getTagStr(){
       $array =  ArrayHelper::map($this->tags,'id','name');
       return  implode(', ', $array);
    }
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $array =  ArrayHelper::map($this->tags,'id','id');
        if($this->tag_array){
            foreach ($this->tag_array as $item){
                if(!in_array($item,$array)){
                    $model = new BlogTag();
                    $model->blog_id = $this->id;
                    $model->tag_id = $item;
                    $model->validate();
                    $model->save();
                }
                if (isset($array[$item])){
                    unset($array[$item]);
                }
            }
        }
        BlogTag::deleteAll(['tag_id'=>$array,'blog_id'=>$this->id]);
    }
    public function getCategory(){
        return $this->hasMany(CategoryBlog::class,['id'=>'category_id']);
    }
    public function getNameStr(){
       $ar = ArrayHelper::map($this->category,'id','name');
        return implode('',$ar);
    }

}
