<?php

namespace app\modules\admin\models;
use app\models\ProductTag;
use app\models\SaleImage;
use app\models\Tag;
use app\modules\admin\models\Category;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\web\UploadedFile;

/**
 * This is the model class for table "product".
 *
 * @property int $id
 * @property int $category_id
 * @property string $name
 * @property string|null $content
 * @property float $price
 * @property float $old_price
 * @property string|null $keywords
 * @property string|null $description
 * @property string|null $img
 * @property string $hit
 * @property string $new
 * @property string $sale
 * @property int|null $count
 */
class Product extends \yii\db\ActiveRecord
{
    public $file;
    public $tag_array;
    public $gallery;


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'product';
    }

    public function getProduct()
    {
        return $this->hasOne(Category::class, ['id' => 'category_id']);
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['category_id', 'name', 'price', 'old_price'], 'required'],
            [['category_id', 'count','user_id'], 'integer'],
            [['content', 'hit', 'new', 'sale', 'small_content','top_sale'], 'string'],
            [['price', 'old_price'], 'number'],
            [['name', 'keywords', 'description', 'image'], 'string', 'max' => 255],
            [['file'], 'image'],
            [['tag_array'], 'safe'],
            [['gallery'], 'file', 'extensions' => 'png, jpg', 'maxFiles' => 3],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'category_id' => 'Имя категории',
            'name' => 'Имя товара',
            'content' => 'Контент',
            'small_content' => 'Небольшое описание',
            'price' => 'Цена',
            'old_price' => 'Старая цена',
            'keywords' => 'Ключевые слова',
            'description' => 'Описание',
            'image' => 'Картинка',
            'galery' => 'Галерея',
            'file' => 'Картинка(Главная)',
            'hit' => 'Хит',
            'new' => 'Новинка',
            'sale' => 'Распродажа',
            'count' => 'Количество на складе',
            'tagStr'=>'Тэги',
            'img'=>'Картинка главная',
            'top_sale'=>'На главную самая тововая распродажа'
        ];
    }


    public function beforeSave($insert)
    {
        if ($file = UploadedFile::getInstance($this, 'file')) {
            $dir = 'upload/product/logo_product/';
            if(!empty($this->image)) {
                if (file_exists($dir . $this->image)) {
                        unlink($dir . $this->image);
                    }
                }
            $this->image = $file->baseName . '_' . Yii::$app->getSecurity()->generateRandomString(7) . '.' . $file->extension;
            $file->saveAs($dir.$this->image);
            return $file;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function getProductImg(){
        return $this->hasMany(ProductImage::class,['product_id'=>'id'])->andWhere(['class'=>self::tableName()]);
    }
    public function getImg(){
        if($this->image){
            $path =  str_replace('admin.','',Url::home(true)).'upload/product/logo_product/'.$this->image;
        }else{
            $path = str_replace('admin.','',Url::home(true)).'upload/product/logo_product/no-image.png';
        }

        return $path;
    }
    public function getImageLinks(){
        return ArrayHelper::getColumn($this->productImg,'ImageUrl');
    }
    public function getImageLinksDate(){
        return ArrayHelper::toArray($this->productImg,[
           ProductImage::class=>[
               'caption'=>'name',
               'key'=>'id'
           ]
        ]);
    }
    public function getProductTag(){
        return $this->hasMany(ProductTag::class,['product_id'=>'id']);
    }
    public function getTags(){
        return $this->hasMany(Tag::class,['id'=>'tag_id'])->via('productTag');
    }
    public function getTagStr(){
        $arr = ArrayHelper::map($this->tags,'id','name');
        return implode(', ',$arr);
    }
    public function afterFind()
    {
        $this->tag_array = $this->tags;
    }
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $array  = ArrayHelper::map($this->tags,'id','id');
        if($this->tag_array) {
            foreach ($this->tag_array as $item) {
                if (!in_array($item, $array)) {
                    $model = new ProductTag();
                    $model->product_id = $this->id;
                    $model->tag_id = $item;
                    $model->validate();
                    $model->save();
                }
                if (isset($array[$item])) {
                    unset($array[$item]);
                }
            }
        }

        ProductTag::deleteAll(['tag_id'=>$array,'product_id'=>$this->id]);
    }
    public function getImgName(){
        $array= ArrayHelper::map($this->productImg,'id','name');
        foreach ($array as $item){
            echo $item;
        }
    }
    public function getImageLik()
    {
        return Html::img("/upload/product/logo_product/" . $this->image);
    }

}


